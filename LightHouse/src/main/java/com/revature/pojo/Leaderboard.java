package com.revature.pojo;

import java.sql.Date;
import java.time.Duration;
import java.time.LocalDate;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

/**
 * This class defines the Leaderboard domain
 * 
 * @author Pameni Gaelle & Roberto Rodriguez
 */

@Entity
@Table(name = "leaderboard")
public class Leaderboard {

	/**
	 * the category ID is auto generated by postgresSQL using sequence
	 */

	@Id
	@Column(name = "lead_id")
	@SequenceGenerator(name = "LEADID_SEQ", sequenceName = "lead_id_seq")
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "LEADID_SEQ")
	private int leadID;

	/*
	 * Each user is connected to the leaderboard by the username
	 */
	@Column(name = "username")
	private String userName;

	/*
	 * There is a learderboard by category
	 */
	@OneToOne
	@JoinColumn(name = "cat_id")
	private Category cat;

	/*
	 * Each quiz score affects the leaderboard arrangement
	 */
	@Column(name = "quiz_score")
	private double quizScore;

	/*
	 * The time used to complete a quizz affects the leaderboard arrangement
	 */
	@Column(name = "time_taken")
	private long timeTaken;

	/*
	 * Each leaderboard contain the date the quizz was taken
	 */
	@Column(name = "date_taken")
	private Date dateTaken;

	public Leaderboard() {
		super();
	}

	public Leaderboard(int leadID, String username, Category cat, double quizScore, long timeTaken, Date dateTaken) {
		super();
		this.leadID = leadID;
		this.userName = username;
		this.cat = cat;
		this.quizScore = quizScore;
		this.timeTaken = timeTaken;
		this.dateTaken = dateTaken;
	}

	public int getLeadID() {
		return leadID;
	}

	public void setLeadID(int leadID) {
		this.leadID = leadID;
	}

	public String getUsername() {
		return userName;
	}

	public void setUsername(String username) {
		this.userName = username;
	}

	public Category getCat() {
		return cat;
	}

	public void setCat(Category cat) {
		this.cat = cat;
	}

	public double getQuizScore() {
		return quizScore;
	}

	public void setQuizScore(double quizScore) {
		this.quizScore = quizScore;
	}

	public long getTimeTaken() {
		return timeTaken;
	}

	public void setTimeTaken(long timeTaken) {
		this.timeTaken = timeTaken;
	}

	public Date getDateTaken() {
		return dateTaken;
	}

	public void setDateTaken(Date dateTaken) {
		this.dateTaken = dateTaken;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cat == null) ? 0 : cat.hashCode());
		result = prime * result + ((dateTaken == null) ? 0 : dateTaken.hashCode());
		result = prime * result + leadID;
		long temp;
		temp = Double.doubleToLongBits(quizScore);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + (int) (timeTaken ^ (timeTaken >>> 32));
		result = prime * result + ((userName == null) ? 0 : userName.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Leaderboard other = (Leaderboard) obj;
		if (cat == null) {
			if (other.cat != null)
				return false;
		} else if (!cat.equals(other.cat))
			return false;
		if (dateTaken == null) {
			if (other.dateTaken != null)
				return false;
		} else if (!dateTaken.equals(other.dateTaken))
			return false;
		if (leadID != other.leadID)
			return false;
		if (Double.doubleToLongBits(quizScore) != Double.doubleToLongBits(other.quizScore))
			return false;
		if (timeTaken != other.timeTaken)
			return false;
		if (userName == null) {
			if (other.userName != null)
				return false;
		} else if (!userName.equals(other.userName))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Leaderboard [leadID=" + leadID + ", username=" + userName + ", cat=" + cat + ", quizScore=" + quizScore
				+ ", timeTaken=" + timeTaken + ", dateTaken=" + dateTaken + "]";
	}
}