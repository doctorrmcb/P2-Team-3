package com.revature.pojo;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

/**
 * This class defines the question domain
 * 
 * @author Pameni Gaelle & Roberto Rodriguez
 */

@Entity
@Table(name = "question")
public class Question {

	/**
	 * the questionID is auto generated by postgresSQL using sequence
	 */
	@Id
	@Column(name = "question_id")
	@SequenceGenerator(name = "QUESTIONID_SEQ", sequenceName = "question_id_seq")
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "QUESTIONID_SEQ")
	private int questionID;

	/**
	 * each question is located into a category
	 */
	@ManyToOne
	@JoinColumn(name = "cat_id")
	private Category cat;

	/**
	 * each question has a unique name content
	 */
	@Column(name = "question_name")
	private String questionName;

	/**
	 * each question has a unique correct answer
	 */
	@Column(name = "correct_answer")
	private String correctAnswer;

	/**
	 * each question has multiple wrong answers
	 */
	@Column(name = "wrong_answer_1")
	private String wrongAnswer1;

	/**
	 * each question has multiple wrong answers
	 */
	@Column(name = "wrong_answer_2")
	private String wrongAnswer2;

	/**
	 * each question has multiple wrong answers
	 */
	@Column(name = "wrong_answer_3")
	private String wrongAnswer3;

	/**
	 * each question has a unique explanation
	 */
	@Column(name = "explanation")
	private String explanation;

	/**
	 * each question has a unique rating
	 */
	@Column(name = "question_rating")
	private int questionRating;

	/**
	 * many users can write a question into the system
	 */
	@ManyToOne
	@JoinColumn(name = "user_id")
	private User user;

	/**
	 * a question be approved, rejected, pending...
	 */
	@Column(name = "status")
	private String status;

	public Question() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Question(int questionID, Category cat, String questionName, String correctAnswer, String wrongAnswer1,
			String wrongAnswer2, String wrongAnswer3, String explanation, int questionRating, User user,
			String status) {
		super();
		this.questionID = questionID;
		this.cat = cat;
		this.questionName = questionName;
		this.correctAnswer = correctAnswer;
		this.wrongAnswer1 = wrongAnswer1;
		this.wrongAnswer2 = wrongAnswer2;
		this.wrongAnswer3 = wrongAnswer3;
		this.explanation = explanation;
		this.questionRating = questionRating;
		this.user = user;
		this.status = status;
	}

	public int getQuestionID() {
		return questionID;
	}

	public void setQuestionID(int questionID) {
		this.questionID = questionID;
	}

	public Category getCat() {
		return cat;
	}

	public void setCat(Category cat) {
		this.cat = cat;
	}

	public String getQuestionName() {
		return questionName;
	}

	public void setQuestionName(String questionName) {
		this.questionName = questionName;
	}

	public String getCorrectAnswer() {
		return correctAnswer;
	}

	public void setCorrectAnswer(String correctAnswer) {
		this.correctAnswer = correctAnswer;
	}

	public String getWrongAnswer1() {
		return wrongAnswer1;
	}

	public void setWrongAnswer1(String wrongAnswer1) {
		this.wrongAnswer1 = wrongAnswer1;
	}

	public String getWrongAnswer2() {
		return wrongAnswer2;
	}

	public void setWrongAnswer2(String wrongAnswer2) {
		this.wrongAnswer2 = wrongAnswer2;
	}

	public String getWrongAnswer3() {
		return wrongAnswer3;
	}

	public void setWrongAnswer3(String wrongAnswer3) {
		this.wrongAnswer3 = wrongAnswer3;
	}

	public String getExplanation() {
		return explanation;
	}

	public void setExplanation(String explanation) {
		this.explanation = explanation;
	}

	public int getQuestionRating() {
		return questionRating;
	}

	public void setQuestionRating(int questionRating) {
		this.questionRating = questionRating;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cat == null) ? 0 : cat.hashCode());
		result = prime * result + ((correctAnswer == null) ? 0 : correctAnswer.hashCode());
		result = prime * result + ((explanation == null) ? 0 : explanation.hashCode());
		result = prime * result + questionID;
		result = prime * result + ((questionName == null) ? 0 : questionName.hashCode());
		result = prime * result + questionRating;
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		result = prime * result + ((user == null) ? 0 : user.hashCode());
		result = prime * result + ((wrongAnswer1 == null) ? 0 : wrongAnswer1.hashCode());
		result = prime * result + ((wrongAnswer2 == null) ? 0 : wrongAnswer2.hashCode());
		result = prime * result + ((wrongAnswer3 == null) ? 0 : wrongAnswer3.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Question other = (Question) obj;
		if (cat == null) {
			if (other.cat != null)
				return false;
		} else if (!cat.equals(other.cat))
			return false;
		if (correctAnswer == null) {
			if (other.correctAnswer != null)
				return false;
		} else if (!correctAnswer.equals(other.correctAnswer))
			return false;
		if (explanation == null) {
			if (other.explanation != null)
				return false;
		} else if (!explanation.equals(other.explanation))
			return false;
		if (questionID != other.questionID)
			return false;
		if (questionName == null) {
			if (other.questionName != null)
				return false;
		} else if (!questionName.equals(other.questionName))
			return false;
		if (questionRating != other.questionRating)
			return false;
		if (status == null) {
			if (other.status != null)
				return false;
		} else if (!status.equals(other.status))
			return false;
		if (user == null) {
			if (other.user != null)
				return false;
		} else if (!user.equals(other.user))
			return false;
		if (wrongAnswer1 == null) {
			if (other.wrongAnswer1 != null)
				return false;
		} else if (!wrongAnswer1.equals(other.wrongAnswer1))
			return false;
		if (wrongAnswer2 == null) {
			if (other.wrongAnswer2 != null)
				return false;
		} else if (!wrongAnswer2.equals(other.wrongAnswer2))
			return false;
		if (wrongAnswer3 == null) {
			if (other.wrongAnswer3 != null)
				return false;
		} else if (!wrongAnswer3.equals(other.wrongAnswer3))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Question [questionID=" + questionID + ", cat=" + cat + ", questionName=" + questionName
				+ ", correctAnswer=" + correctAnswer + ", wrongAnswer1=" + wrongAnswer1 + ", wrongAnswer2="
				+ wrongAnswer2 + ", wrongAnswer3=" + wrongAnswer3 + ", explanation=" + explanation + ", questionRating="
				+ questionRating + ", user=" + user + ", status=" + status + "]";
	}

}